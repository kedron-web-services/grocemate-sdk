/* tslint:disable */
/* eslint-disable */
/**
 * GroceMate API
 * This is the API for GroceMate backend.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CommonError
 */
export interface CommonError {
    /**
     * 
     * @type {string}
     * @memberof CommonError
     */
    'error'?: string;
}
/**
 * 
 * @export
 * @interface CommonGenericSimpleResponse
 */
export interface CommonGenericSimpleResponse {
    /**
     * 
     * @type {string}
     * @memberof CommonGenericSimpleResponse
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface HandlersAuthResponse
 */
export interface HandlersAuthResponse {
    /**
     * 
     * @type {string}
     * @memberof HandlersAuthResponse
     */
    'token'?: string;
    /**
     * 
     * @type {ModelsUser}
     * @memberof HandlersAuthResponse
     */
    'user'?: ModelsUser;
}
/**
 * 
 * @export
 * @interface HandlersCreateHomeRequest
 */
export interface HandlersCreateHomeRequest {
    /**
     * 
     * @type {string}
     * @memberof HandlersCreateHomeRequest
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof HandlersCreateHomeRequest
     */
    'city': string;
    /**
     * 
     * @type {string}
     * @memberof HandlersCreateHomeRequest
     */
    'country': string;
    /**
     * 
     * @type {number}
     * @memberof HandlersCreateHomeRequest
     */
    'latitude'?: number;
    /**
     * 
     * @type {number}
     * @memberof HandlersCreateHomeRequest
     */
    'longitude'?: number;
    /**
     * 
     * @type {string}
     * @memberof HandlersCreateHomeRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof HandlersCreateHomeRequest
     */
    'postal_code': string;
    /**
     * 
     * @type {string}
     * @memberof HandlersCreateHomeRequest
     */
    'province': string;
}
/**
 * Request body for Google mobile login (ID token from the client).
 * @export
 * @interface HandlersGoogleMobileRequest
 */
export interface HandlersGoogleMobileRequest {
    /**
     * 
     * @type {string}
     * @memberof HandlersGoogleMobileRequest
     */
    'id_token': string;
}
/**
 * 
 * @export
 * @interface HandlersOTPStartRequest
 */
export interface HandlersOTPStartRequest {
    /**
     * 
     * @type {string}
     * @memberof HandlersOTPStartRequest
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface HandlersOTPVerifyRequest
 */
export interface HandlersOTPVerifyRequest {
    /**
     * 
     * @type {string}
     * @memberof HandlersOTPVerifyRequest
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof HandlersOTPVerifyRequest
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface HandlersSetDefaultHomeRequest
 */
export interface HandlersSetDefaultHomeRequest {
    /**
     * 
     * @type {string}
     * @memberof HandlersSetDefaultHomeRequest
     */
    'home_id': string;
}
/**
 * 
 * @export
 * @interface HandlersUpdateUserRequest
 */
export interface HandlersUpdateUserRequest {
    /**
     * 
     * @type {string}
     * @memberof HandlersUpdateUserRequest
     */
    'role'?: string;
}
/**
 * 
 * @export
 * @interface ModelsHome
 */
export interface ModelsHome {
    /**
     * 
     * @type {string}
     * @memberof ModelsHome
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsHome
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsHome
     */
    'country'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsHome
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsHome
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsHome
     */
    'latitude'?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelsHome
     */
    'longitude'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsHome
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsHome
     */
    'ownerID'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsHome
     */
    'postalCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsHome
     */
    'province'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsHome
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface ModelsUser
 */
export interface ModelsUser {
    /**
     * 
     * @type {string}
     * @memberof ModelsUser
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUser
     */
    'default_home_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUser
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUser
     */
    'id'?: string;
    /**
     * user, admin, support
     * @type {string}
     * @memberof ModelsUser
     */
    'role'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUser
     */
    'updatedAt'?: string;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Exchanges the authorization code, fetches user email, then issues a JWT.
         * @summary Google OAuth2 callback
         * @param {string} code Google authorization code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGoogleCallbackGet: async (code: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('authGoogleCallbackGet', 'code', code)
            const localVarPath = `/auth/google/callback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Redirects the client to Google\'s OAuth2 consent screen.
         * @summary Begin Google OAuth2 login (redirect)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGoogleLoginGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/google/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Accepts a Google ID token from the mobile client, verifies it with Google, upserts the user and returns JWT.
         * @summary Sign in with Google (mobile)
         * @param {HandlersGoogleMobileRequest} payload Google ID token payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGoogleMobilePost: async (payload: HandlersGoogleMobileRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('authGoogleMobilePost', 'payload', payload)
            const localVarPath = `/auth/google/mobile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generates a 6-digit OTP, stores a hashed copy, and logs the code (mock email).
         * @summary Start email login (send OTP)
         * @param {HandlersOTPStartRequest} payload Email payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authOtpStartPost: async (payload: HandlersOTPStartRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('authOtpStartPost', 'payload', payload)
            const localVarPath = `/auth/otp/start`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Verifies the 6-digit OTP, issues a JWT, and deletes the OTP record.
         * @summary Verify email OTP
         * @param {HandlersOTPVerifyRequest} payload Verify payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authOtpVerifyPost: async (payload: HandlersOTPVerifyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('authOtpVerifyPost', 'payload', payload)
            const localVarPath = `/auth/otp/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * Exchanges the authorization code, fetches user email, then issues a JWT.
         * @summary Google OAuth2 callback
         * @param {string} code Google authorization code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authGoogleCallbackGet(code: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandlersAuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authGoogleCallbackGet(code, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authGoogleCallbackGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Redirects the client to Google\'s OAuth2 consent screen.
         * @summary Begin Google OAuth2 login (redirect)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authGoogleLoginGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authGoogleLoginGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authGoogleLoginGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Accepts a Google ID token from the mobile client, verifies it with Google, upserts the user and returns JWT.
         * @summary Sign in with Google (mobile)
         * @param {HandlersGoogleMobileRequest} payload Google ID token payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authGoogleMobilePost(payload: HandlersGoogleMobileRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandlersAuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authGoogleMobilePost(payload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authGoogleMobilePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Generates a 6-digit OTP, stores a hashed copy, and logs the code (mock email).
         * @summary Start email login (send OTP)
         * @param {HandlersOTPStartRequest} payload Email payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authOtpStartPost(payload: HandlersOTPStartRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonGenericSimpleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authOtpStartPost(payload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authOtpStartPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Verifies the 6-digit OTP, issues a JWT, and deletes the OTP record.
         * @summary Verify email OTP
         * @param {HandlersOTPVerifyRequest} payload Verify payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authOtpVerifyPost(payload: HandlersOTPVerifyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandlersAuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authOtpVerifyPost(payload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authOtpVerifyPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * Exchanges the authorization code, fetches user email, then issues a JWT.
         * @summary Google OAuth2 callback
         * @param {string} code Google authorization code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGoogleCallbackGet(code: string, options?: any): AxiosPromise<HandlersAuthResponse> {
            return localVarFp.authGoogleCallbackGet(code, options).then((request) => request(axios, basePath));
        },
        /**
         * Redirects the client to Google\'s OAuth2 consent screen.
         * @summary Begin Google OAuth2 login (redirect)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGoogleLoginGet(options?: any): AxiosPromise<void> {
            return localVarFp.authGoogleLoginGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Accepts a Google ID token from the mobile client, verifies it with Google, upserts the user and returns JWT.
         * @summary Sign in with Google (mobile)
         * @param {HandlersGoogleMobileRequest} payload Google ID token payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGoogleMobilePost(payload: HandlersGoogleMobileRequest, options?: any): AxiosPromise<HandlersAuthResponse> {
            return localVarFp.authGoogleMobilePost(payload, options).then((request) => request(axios, basePath));
        },
        /**
         * Generates a 6-digit OTP, stores a hashed copy, and logs the code (mock email).
         * @summary Start email login (send OTP)
         * @param {HandlersOTPStartRequest} payload Email payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authOtpStartPost(payload: HandlersOTPStartRequest, options?: any): AxiosPromise<CommonGenericSimpleResponse> {
            return localVarFp.authOtpStartPost(payload, options).then((request) => request(axios, basePath));
        },
        /**
         * Verifies the 6-digit OTP, issues a JWT, and deletes the OTP record.
         * @summary Verify email OTP
         * @param {HandlersOTPVerifyRequest} payload Verify payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authOtpVerifyPost(payload: HandlersOTPVerifyRequest, options?: any): AxiosPromise<HandlersAuthResponse> {
            return localVarFp.authOtpVerifyPost(payload, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * Exchanges the authorization code, fetches user email, then issues a JWT.
     * @summary Google OAuth2 callback
     * @param {string} code Google authorization code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authGoogleCallbackGet(code: string, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authGoogleCallbackGet(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Redirects the client to Google\'s OAuth2 consent screen.
     * @summary Begin Google OAuth2 login (redirect)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authGoogleLoginGet(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authGoogleLoginGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Accepts a Google ID token from the mobile client, verifies it with Google, upserts the user and returns JWT.
     * @summary Sign in with Google (mobile)
     * @param {HandlersGoogleMobileRequest} payload Google ID token payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authGoogleMobilePost(payload: HandlersGoogleMobileRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authGoogleMobilePost(payload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generates a 6-digit OTP, stores a hashed copy, and logs the code (mock email).
     * @summary Start email login (send OTP)
     * @param {HandlersOTPStartRequest} payload Email payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authOtpStartPost(payload: HandlersOTPStartRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authOtpStartPost(payload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Verifies the 6-digit OTP, issues a JWT, and deletes the OTP record.
     * @summary Verify email OTP
     * @param {HandlersOTPVerifyRequest} payload Verify payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authOtpVerifyPost(payload: HandlersOTPVerifyRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authOtpVerifyPost(payload, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * HomesApi - axios parameter creator
 * @export
 */
export const HomesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List all homes owned by the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        homesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/homes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a home
         * @param {string} id Home ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        homesIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('homesIdDelete', 'id', id)
            const localVarPath = `/homes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a specific home
         * @param {string} id Home ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        homesIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('homesIdGet', 'id', id)
            const localVarPath = `/homes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a home
         * @param {string} id Home ID
         * @param {HandlersCreateHomeRequest} home Home payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        homesIdPut: async (id: string, home: HandlersCreateHomeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('homesIdPut', 'id', id)
            // verify required parameter 'home' is not null or undefined
            assertParamExists('homesIdPut', 'home', home)
            const localVarPath = `/homes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(home, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new home linked to the current user
         * @summary Create a new home
         * @param {HandlersCreateHomeRequest} home Home payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        homesPost: async (home: HandlersCreateHomeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'home' is not null or undefined
            assertParamExists('homesPost', 'home', home)
            const localVarPath = `/homes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(home, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HomesApi - functional programming interface
 * @export
 */
export const HomesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HomesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary List all homes owned by the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async homesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsHome>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.homesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HomesApi.homesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a home
         * @param {string} id Home ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async homesIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonError>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.homesIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HomesApi.homesIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a specific home
         * @param {string} id Home ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async homesIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsHome>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.homesIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HomesApi.homesIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a home
         * @param {string} id Home ID
         * @param {HandlersCreateHomeRequest} home Home payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async homesIdPut(id: string, home: HandlersCreateHomeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsHome>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.homesIdPut(id, home, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HomesApi.homesIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a new home linked to the current user
         * @summary Create a new home
         * @param {HandlersCreateHomeRequest} home Home payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async homesPost(home: HandlersCreateHomeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsHome>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.homesPost(home, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HomesApi.homesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HomesApi - factory interface
 * @export
 */
export const HomesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HomesApiFp(configuration)
    return {
        /**
         * 
         * @summary List all homes owned by the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        homesGet(options?: any): AxiosPromise<Array<ModelsHome>> {
            return localVarFp.homesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a home
         * @param {string} id Home ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        homesIdDelete(id: string, options?: any): AxiosPromise<CommonError> {
            return localVarFp.homesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a specific home
         * @param {string} id Home ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        homesIdGet(id: string, options?: any): AxiosPromise<ModelsHome> {
            return localVarFp.homesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a home
         * @param {string} id Home ID
         * @param {HandlersCreateHomeRequest} home Home payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        homesIdPut(id: string, home: HandlersCreateHomeRequest, options?: any): AxiosPromise<ModelsHome> {
            return localVarFp.homesIdPut(id, home, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new home linked to the current user
         * @summary Create a new home
         * @param {HandlersCreateHomeRequest} home Home payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        homesPost(home: HandlersCreateHomeRequest, options?: any): AxiosPromise<ModelsHome> {
            return localVarFp.homesPost(home, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HomesApi - object-oriented interface
 * @export
 * @class HomesApi
 * @extends {BaseAPI}
 */
export class HomesApi extends BaseAPI {
    /**
     * 
     * @summary List all homes owned by the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomesApi
     */
    public homesGet(options?: RawAxiosRequestConfig) {
        return HomesApiFp(this.configuration).homesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a home
     * @param {string} id Home ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomesApi
     */
    public homesIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return HomesApiFp(this.configuration).homesIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a specific home
     * @param {string} id Home ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomesApi
     */
    public homesIdGet(id: string, options?: RawAxiosRequestConfig) {
        return HomesApiFp(this.configuration).homesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a home
     * @param {string} id Home ID
     * @param {HandlersCreateHomeRequest} home Home payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomesApi
     */
    public homesIdPut(id: string, home: HandlersCreateHomeRequest, options?: RawAxiosRequestConfig) {
        return HomesApiFp(this.configuration).homesIdPut(id, home, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new home linked to the current user
     * @summary Create a new home
     * @param {HandlersCreateHomeRequest} home Home payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomesApi
     */
    public homesPost(home: HandlersCreateHomeRequest, options?: RawAxiosRequestConfig) {
        return HomesApiFp(this.configuration).homesPost(home, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List all users (admin only)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a user (admin only)
         * @param {string} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersIdDelete', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a user by ID (admin or self)
         * @param {string} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersIdGet', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update user role (admin or self)
         * @param {string} id User ID
         * @param {HandlersUpdateUserRequest} [user] User role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdPut: async (id: string, user?: HandlersUpdateUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersIdPut', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(user, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set current user\'s default home
         * @param {HandlersSetDefaultHomeRequest} payload Default home payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeDefaultHomePut: async (payload: HandlersSetDefaultHomeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('usersMeDefaultHomePut', 'payload', payload)
            const localVarPath = `/users/me/default-home`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get current authenticated user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary List all users (admin only)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsUser>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a user (admin only)
         * @param {string} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a user by ID (admin or self)
         * @param {string} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update user role (admin or self)
         * @param {string} id User ID
         * @param {HandlersUpdateUserRequest} [user] User role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersIdPut(id: string, user?: HandlersUpdateUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdPut(id, user, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Set current user\'s default home
         * @param {HandlersSetDefaultHomeRequest} payload Default home payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersMeDefaultHomePut(payload: HandlersSetDefaultHomeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersMeDefaultHomePut(payload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersMeDefaultHomePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get current authenticated user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersMeGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersMeGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersMeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @summary List all users (admin only)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet(options?: any): AxiosPromise<Array<ModelsUser>> {
            return localVarFp.usersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a user (admin only)
         * @param {string} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdDelete(id: string, options?: any): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.usersIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a user by ID (admin or self)
         * @param {string} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdGet(id: string, options?: any): AxiosPromise<ModelsUser> {
            return localVarFp.usersIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update user role (admin or self)
         * @param {string} id User ID
         * @param {HandlersUpdateUserRequest} [user] User role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdPut(id: string, user?: HandlersUpdateUserRequest, options?: any): AxiosPromise<ModelsUser> {
            return localVarFp.usersIdPut(id, user, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set current user\'s default home
         * @param {HandlersSetDefaultHomeRequest} payload Default home payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeDefaultHomePut(payload: HandlersSetDefaultHomeRequest, options?: any): AxiosPromise<ModelsUser> {
            return localVarFp.usersMeDefaultHomePut(payload, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get current authenticated user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeGet(options?: any): AxiosPromise<ModelsUser> {
            return localVarFp.usersMeGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @summary List all users (admin only)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersGet(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a user (admin only)
     * @param {string} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a user by ID (admin or self)
     * @param {string} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersIdGet(id: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update user role (admin or self)
     * @param {string} id User ID
     * @param {HandlersUpdateUserRequest} [user] User role
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersIdPut(id: string, user?: HandlersUpdateUserRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersIdPut(id, user, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set current user\'s default home
     * @param {HandlersSetDefaultHomeRequest} payload Default home payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersMeDefaultHomePut(payload: HandlersSetDefaultHomeRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersMeDefaultHomePut(payload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get current authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersMeGet(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersMeGet(options).then((request) => request(this.axios, this.basePath));
    }
}



