/* tslint:disable */
/* eslint-disable */
/**
 * GroceMate API
 * This is the API for GroceMate backend.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { CommonError } from '../models';
// @ts-ignore
import { HandlersCreateHomeRequest } from '../models';
// @ts-ignore
import { ModelsHome } from '../models';
/**
 * HomesApi - axios parameter creator
 * @export
 */
export const HomesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List all homes owned by the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        homesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/homes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a home
         * @param {string} id Home ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        homesIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('homesIdDelete', 'id', id)
            const localVarPath = `/homes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a specific home
         * @param {string} id Home ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        homesIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('homesIdGet', 'id', id)
            const localVarPath = `/homes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a home
         * @param {string} id Home ID
         * @param {HandlersCreateHomeRequest} home Home payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        homesIdPut: async (id: string, home: HandlersCreateHomeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('homesIdPut', 'id', id)
            // verify required parameter 'home' is not null or undefined
            assertParamExists('homesIdPut', 'home', home)
            const localVarPath = `/homes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(home, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new home linked to the current user
         * @summary Create a new home
         * @param {HandlersCreateHomeRequest} home Home payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        homesPost: async (home: HandlersCreateHomeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'home' is not null or undefined
            assertParamExists('homesPost', 'home', home)
            const localVarPath = `/homes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(home, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HomesApi - functional programming interface
 * @export
 */
export const HomesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HomesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary List all homes owned by the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async homesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsHome>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.homesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HomesApi.homesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a home
         * @param {string} id Home ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async homesIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonError>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.homesIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HomesApi.homesIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a specific home
         * @param {string} id Home ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async homesIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsHome>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.homesIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HomesApi.homesIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a home
         * @param {string} id Home ID
         * @param {HandlersCreateHomeRequest} home Home payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async homesIdPut(id: string, home: HandlersCreateHomeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsHome>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.homesIdPut(id, home, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HomesApi.homesIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a new home linked to the current user
         * @summary Create a new home
         * @param {HandlersCreateHomeRequest} home Home payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async homesPost(home: HandlersCreateHomeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsHome>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.homesPost(home, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HomesApi.homesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HomesApi - factory interface
 * @export
 */
export const HomesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HomesApiFp(configuration)
    return {
        /**
         * 
         * @summary List all homes owned by the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        homesGet(options?: any): AxiosPromise<Array<ModelsHome>> {
            return localVarFp.homesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a home
         * @param {string} id Home ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        homesIdDelete(id: string, options?: any): AxiosPromise<CommonError> {
            return localVarFp.homesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a specific home
         * @param {string} id Home ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        homesIdGet(id: string, options?: any): AxiosPromise<ModelsHome> {
            return localVarFp.homesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a home
         * @param {string} id Home ID
         * @param {HandlersCreateHomeRequest} home Home payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        homesIdPut(id: string, home: HandlersCreateHomeRequest, options?: any): AxiosPromise<ModelsHome> {
            return localVarFp.homesIdPut(id, home, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new home linked to the current user
         * @summary Create a new home
         * @param {HandlersCreateHomeRequest} home Home payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        homesPost(home: HandlersCreateHomeRequest, options?: any): AxiosPromise<ModelsHome> {
            return localVarFp.homesPost(home, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HomesApi - object-oriented interface
 * @export
 * @class HomesApi
 * @extends {BaseAPI}
 */
export class HomesApi extends BaseAPI {
    /**
     * 
     * @summary List all homes owned by the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomesApi
     */
    public homesGet(options?: RawAxiosRequestConfig) {
        return HomesApiFp(this.configuration).homesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a home
     * @param {string} id Home ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomesApi
     */
    public homesIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return HomesApiFp(this.configuration).homesIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a specific home
     * @param {string} id Home ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomesApi
     */
    public homesIdGet(id: string, options?: RawAxiosRequestConfig) {
        return HomesApiFp(this.configuration).homesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a home
     * @param {string} id Home ID
     * @param {HandlersCreateHomeRequest} home Home payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomesApi
     */
    public homesIdPut(id: string, home: HandlersCreateHomeRequest, options?: RawAxiosRequestConfig) {
        return HomesApiFp(this.configuration).homesIdPut(id, home, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new home linked to the current user
     * @summary Create a new home
     * @param {HandlersCreateHomeRequest} home Home payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomesApi
     */
    public homesPost(home: HandlersCreateHomeRequest, options?: RawAxiosRequestConfig) {
        return HomesApiFp(this.configuration).homesPost(home, options).then((request) => request(this.axios, this.basePath));
    }
}

