/* tslint:disable */
/* eslint-disable */
/**
 * GroceMate API
 * This is the API for GroceMate backend.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { CommonError } from '../models';
// @ts-ignore
import { CommonGenericSimpleResponse } from '../models';
// @ts-ignore
import { HandlersAuthResponse } from '../models';
// @ts-ignore
import { HandlersGoogleMobileRequest } from '../models';
// @ts-ignore
import { HandlersOTPStartRequest } from '../models';
// @ts-ignore
import { HandlersOTPVerifyRequest } from '../models';
/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Exchanges the authorization code, fetches user email, then issues a JWT.
         * @summary Google OAuth2 callback
         * @param {string} code Google authorization code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGoogleCallbackGet: async (code: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('authGoogleCallbackGet', 'code', code)
            const localVarPath = `/auth/google/callback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Redirects the client to Google\'s OAuth2 consent screen.
         * @summary Begin Google OAuth2 login (redirect)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGoogleLoginGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/google/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Accepts a Google ID token from the mobile client, verifies it with Google, upserts the user and returns JWT.
         * @summary Sign in with Google (mobile)
         * @param {HandlersGoogleMobileRequest} payload Google ID token payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGoogleMobilePost: async (payload: HandlersGoogleMobileRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('authGoogleMobilePost', 'payload', payload)
            const localVarPath = `/auth/google/mobile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generates a 6-digit OTP, stores a hashed copy, and logs the code (mock email).
         * @summary Start email login (send OTP)
         * @param {HandlersOTPStartRequest} payload Email payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authOtpStartPost: async (payload: HandlersOTPStartRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('authOtpStartPost', 'payload', payload)
            const localVarPath = `/auth/otp/start`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Verifies the 6-digit OTP, issues a JWT, and deletes the OTP record.
         * @summary Verify email OTP
         * @param {HandlersOTPVerifyRequest} payload Verify payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authOtpVerifyPost: async (payload: HandlersOTPVerifyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('authOtpVerifyPost', 'payload', payload)
            const localVarPath = `/auth/otp/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * Exchanges the authorization code, fetches user email, then issues a JWT.
         * @summary Google OAuth2 callback
         * @param {string} code Google authorization code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authGoogleCallbackGet(code: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandlersAuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authGoogleCallbackGet(code, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authGoogleCallbackGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Redirects the client to Google\'s OAuth2 consent screen.
         * @summary Begin Google OAuth2 login (redirect)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authGoogleLoginGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authGoogleLoginGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authGoogleLoginGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Accepts a Google ID token from the mobile client, verifies it with Google, upserts the user and returns JWT.
         * @summary Sign in with Google (mobile)
         * @param {HandlersGoogleMobileRequest} payload Google ID token payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authGoogleMobilePost(payload: HandlersGoogleMobileRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandlersAuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authGoogleMobilePost(payload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authGoogleMobilePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Generates a 6-digit OTP, stores a hashed copy, and logs the code (mock email).
         * @summary Start email login (send OTP)
         * @param {HandlersOTPStartRequest} payload Email payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authOtpStartPost(payload: HandlersOTPStartRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonGenericSimpleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authOtpStartPost(payload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authOtpStartPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Verifies the 6-digit OTP, issues a JWT, and deletes the OTP record.
         * @summary Verify email OTP
         * @param {HandlersOTPVerifyRequest} payload Verify payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authOtpVerifyPost(payload: HandlersOTPVerifyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandlersAuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authOtpVerifyPost(payload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authOtpVerifyPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * Exchanges the authorization code, fetches user email, then issues a JWT.
         * @summary Google OAuth2 callback
         * @param {string} code Google authorization code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGoogleCallbackGet(code: string, options?: any): AxiosPromise<HandlersAuthResponse> {
            return localVarFp.authGoogleCallbackGet(code, options).then((request) => request(axios, basePath));
        },
        /**
         * Redirects the client to Google\'s OAuth2 consent screen.
         * @summary Begin Google OAuth2 login (redirect)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGoogleLoginGet(options?: any): AxiosPromise<void> {
            return localVarFp.authGoogleLoginGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Accepts a Google ID token from the mobile client, verifies it with Google, upserts the user and returns JWT.
         * @summary Sign in with Google (mobile)
         * @param {HandlersGoogleMobileRequest} payload Google ID token payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGoogleMobilePost(payload: HandlersGoogleMobileRequest, options?: any): AxiosPromise<HandlersAuthResponse> {
            return localVarFp.authGoogleMobilePost(payload, options).then((request) => request(axios, basePath));
        },
        /**
         * Generates a 6-digit OTP, stores a hashed copy, and logs the code (mock email).
         * @summary Start email login (send OTP)
         * @param {HandlersOTPStartRequest} payload Email payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authOtpStartPost(payload: HandlersOTPStartRequest, options?: any): AxiosPromise<CommonGenericSimpleResponse> {
            return localVarFp.authOtpStartPost(payload, options).then((request) => request(axios, basePath));
        },
        /**
         * Verifies the 6-digit OTP, issues a JWT, and deletes the OTP record.
         * @summary Verify email OTP
         * @param {HandlersOTPVerifyRequest} payload Verify payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authOtpVerifyPost(payload: HandlersOTPVerifyRequest, options?: any): AxiosPromise<HandlersAuthResponse> {
            return localVarFp.authOtpVerifyPost(payload, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * Exchanges the authorization code, fetches user email, then issues a JWT.
     * @summary Google OAuth2 callback
     * @param {string} code Google authorization code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authGoogleCallbackGet(code: string, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authGoogleCallbackGet(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Redirects the client to Google\'s OAuth2 consent screen.
     * @summary Begin Google OAuth2 login (redirect)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authGoogleLoginGet(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authGoogleLoginGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Accepts a Google ID token from the mobile client, verifies it with Google, upserts the user and returns JWT.
     * @summary Sign in with Google (mobile)
     * @param {HandlersGoogleMobileRequest} payload Google ID token payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authGoogleMobilePost(payload: HandlersGoogleMobileRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authGoogleMobilePost(payload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generates a 6-digit OTP, stores a hashed copy, and logs the code (mock email).
     * @summary Start email login (send OTP)
     * @param {HandlersOTPStartRequest} payload Email payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authOtpStartPost(payload: HandlersOTPStartRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authOtpStartPost(payload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Verifies the 6-digit OTP, issues a JWT, and deletes the OTP record.
     * @summary Verify email OTP
     * @param {HandlersOTPVerifyRequest} payload Verify payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authOtpVerifyPost(payload: HandlersOTPVerifyRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authOtpVerifyPost(payload, options).then((request) => request(this.axios, this.basePath));
    }
}

