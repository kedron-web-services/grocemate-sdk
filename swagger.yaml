basePath: /
definitions:
  common.Error:
    properties:
      error:
        type: string
    type: object
  gin.H:
    additionalProperties: {}
    type: object
  handlers.CreateHomeRequest:
    properties:
      address:
        type: string
      city:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      name:
        type: string
      postal_code:
        type: string
      province:
        type: string
    required:
    - address
    - city
    - name
    - postal_code
    - province
    type: object
  handlers.UpdateUserRequest:
    properties:
      role:
        type: string
    type: object
  models.Home:
    properties:
      address:
        type: string
      city:
        type: string
      country:
        type: string
      createdAt:
        type: string
      id:
        type: string
      latitude:
        format: float64
        type: number
      longitude:
        format: float64
        type: number
      name:
        type: string
      ownerID:
        type: string
      postalCode:
        type: string
      province:
        type: string
      updatedAt:
        type: string
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      id:
        type: string
      role:
        description: user, admin, support
        type: string
      updatedAt:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is the API for GroceMate backend.
  title: GroceMate API
  version: "1.0"
paths:
  /homes:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              items:
                $ref: '#/definitions/models.Home'
              type: array
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.Error'
      security:
      - BearerAuth: []
      summary: List all homes owned by the user
      tags:
      - homes
    post:
      consumes:
      - application/json
      description: Creates a new home linked to the current user
      parameters:
      - description: Home payload
        in: body
        name: home
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateHomeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Home'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Error'
      security:
      - BearerAuth: []
      summary: Create a new home
      tags:
      - homes
  /homes/{id}:
    delete:
      parameters:
      - description: Home ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/common.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.Error'
      security:
      - BearerAuth: []
      summary: Delete a home
      tags:
      - homes
    get:
      parameters:
      - description: Home ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Home'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/common.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.Error'
      security:
      - BearerAuth: []
      summary: Get a specific home
      tags:
      - homes
    put:
      consumes:
      - application/json
      parameters:
      - description: Home ID
        in: path
        name: id
        required: true
        type: string
      - description: Home payload
        in: body
        name: home
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateHomeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Home'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/common.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.Error'
      security:
      - BearerAuth: []
      summary: Update a home
      tags:
      - homes
  /users:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/gin.H'
      security:
      - BearerAuth: []
      summary: List all users (admin only)
      tags:
      - users
  /users/{id}:
    delete:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      security:
      - BearerAuth: []
      summary: Delete a user (admin only)
      tags:
      - users
    get:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
      security:
      - BearerAuth: []
      summary: Get a user by ID (admin or self)
      tags:
      - users
    put:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User role
        in: body
        name: user
        schema:
          $ref: '#/definitions/handlers.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      security:
      - BearerAuth: []
      summary: Update user role (admin or self)
      tags:
      - users
  /users/me:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
      security:
      - BearerAuth: []
      summary: Get current authenticated user
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
